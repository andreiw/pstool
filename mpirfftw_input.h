// Time-stamp: <2005-02-20 01:49:01 andyw>
// Copyright (C) 2004 Andrey Warkentin
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

#ifndef MPIRFFTWINPUT_H
#define MPIRFFTWINPUT_H

// System includes.
#include <mpi.h>
#include <string>
#include <rfftw.h>
#include <cstddef>
#include <cstdlib>

// Local includes.
#include "realfft.h"
#include "ps_generator.h"
#include "generic_exception.h"

// Forward declarations.
class RealFFT;
class PSGenerator;

class MPIRFFTWInputException:public GenericException
{
public:

  // Error types thrown.
  typedef enum
  {

    // File I/O error.
    EFIO,

    // Empty file. (No data points).
    EEMPTY,

    // Failure in memory allocation.
    EMEM
  } error_t;
private:

  // Error code associated with the exception.
    error_t error_code;
public:

  // Constructor used for creation of object.
    MPIRFFTWInputException (error_t err,
			    const std::
			    string & aux_err):GenericException (aux_err),
    error_code (err)
  {
  }

  // Returns the error code association with the exception.
  error_t get_error_code () const
  {
    return error_code;
  }
};

class MPIRFFTWInput
{
private:

  // We're friends with RealFFT.
  friend class RealFFT;

  // We're friends with PSGenerator.
  friend class PSGenerator;

  // MPI File descriptor.
  MPI_File infile_opened;

  // Total number of data points inside the opened file.
  // This will be the total number of points processed.
  // The output generated by RealFFT will have this many
  // points as well.
  size_t total_data_points_count;
  
  // Array to hold read-in data points.
  fftw_real *input_data_array;
public:

  // Constructor. Takes the file name of file to read from as the parameter.
    MPIRFFTWInput (char *file_name);

  // Destructor.
   ~MPIRFFTWInput ();

  // Reads the appropriate data, given a RealFFT object which
  // knows how much and what to read.
  void read_data (RealFFT & transform);
};
#endif
